{"version":3,"file":"ContentQuery-8d8f49ed.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent, useRuntimeConfig } from \"#imports\";\nconst ContentQuery = defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const legacy = !useRuntimeConfig().public.content.experimental.advanceQuery;\n    watch(() => props, () => refresh(), { deep: true });\n    const resolveResult = (result) => {\n      if (legacy) {\n        if (result?.surround) {\n          return result.surround;\n        }\n        return result?._id || Array.isArray(result) ? result : result?.result;\n      }\n      return result.result;\n    };\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne().then(resolveResult);\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find().then(resolveResult);\n          }\n          if (legacy) {\n            return queryBuilder.findSurround(path.value);\n          } else {\n            return queryBuilder.withSurround(path.value).findOne().then(resolveResult);\n          }\n        }\n        return queryBuilder.find().then(resolveResult);\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\nexport default ContentQuery;\n</script>\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}