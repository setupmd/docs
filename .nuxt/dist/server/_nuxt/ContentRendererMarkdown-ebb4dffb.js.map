{"version":3,"file":"ContentRendererMarkdown-ebb4dffb.js","sources":["../../../../node_modules/@nuxtjs/mdc/dist/runtime/components/MDCRenderer.vue"],"sourcesContent":["<script>\nimport { h, resolveComponent, Text, defineComponent, toRaw, computed } from \"vue\";\nimport destr from \"destr\";\nimport { kebabCase, pascalCase } from \"scule\";\nimport { find, html } from \"property-information\";\nimport { useRoute, useRuntimeConfig } from \"#app\";\nimport htmlTags from \"../parser/utils/html-tags-list\";\nconst DEFAULT_SLOT = \"default\";\nconst rxOn = /^@|^v-on:/;\nconst rxBind = /^:|^v-bind:/;\nconst rxModel = /^v-model/;\nconst nativeInputs = [\"select\", \"textarea\", \"input\"];\nconst proseComponentMap = Object.fromEntries([\"p\", \"a\", \"blockquote\", \"code\", \"pre\", \"code\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"img\", \"ul\", \"ol\", \"li\", \"strong\", \"table\", \"thead\", \"tbody\", \"td\", \"th\", \"tr\", \"script\"].map((t) => [t, `prose-${t}`]));\nexport default defineComponent({\n  name: \"MDCRenderer\",\n  props: {\n    /**\n     * Content to render\n     */\n    body: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Document meta data\n     */\n    data: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Root tag to use for rendering\n     */\n    tag: {\n      type: [String, Boolean],\n      default: void 0\n    },\n    /**\n     * Whether or not to render Prose components instead of HTML tags\n     */\n    prose: {\n      type: Boolean,\n      default: void 0\n    },\n    /**\n     * The map of custom components to use for rendering.\n     */\n    components: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  async setup(props) {\n    const { mdc } = useRuntimeConfig().public;\n    const tags = {\n      ...mdc.components.prose && props.prose !== false ? proseComponentMap : {},\n      ...mdc.components.map,\n      ...toRaw(props.data?.mdc?.components || {}),\n      ...props.components\n    };\n    const contentKey = computed(() => {\n      const components = (props.body?.children || []).map((n) => n.tag || n.type).filter((t) => !htmlTags.includes(t));\n      return Array.from(new Set(components)).sort().join(\".\");\n    });\n    await resolveContentComponents(props.body, { tags });\n    return { tags, contentKey };\n  },\n  render(ctx) {\n    const { tags, tag, body, data, contentKey } = ctx;\n    if (!body) {\n      return null;\n    }\n    const meta = { ...data, tags };\n    const component = tag !== false ? resolveVueComponent(tag || meta.component?.name || meta.component || \"div\") : void 0;\n    const childrenRendrer = renderSlots(body, h, meta, meta);\n    return component ? h(component, { ...meta.component?.props, ...this.$attrs, key: contentKey }, childrenRendrer) : childrenRendrer.default?.();\n  }\n});\nfunction renderNode(node, h2, documentMeta, parentScope = {}) {\n  if (node.type === \"text\") {\n    return h2(Text, node.value);\n  }\n  const originalTag = node.tag;\n  const renderTag = findMappedTag(node, documentMeta.tags);\n  if (node.tag === \"binding\") {\n    return renderBinding(node, h2, documentMeta, parentScope);\n  }\n  const component = resolveVueComponent(renderTag);\n  if (typeof component === \"object\") {\n    component.tag = originalTag;\n  }\n  const props = propsToData(node, documentMeta);\n  return h2(\n    component,\n    props,\n    renderSlots(node, h2, documentMeta, { ...parentScope, ...props })\n  );\n}\nfunction renderBinding(node, h2, documentMeta, parentScope = {}) {\n  const data = {\n    ...parentScope,\n    $route: () => useRoute(),\n    $document: documentMeta,\n    $doc: documentMeta\n  };\n  const splitter = /\\.|\\[(\\d+)\\]/;\n  const keys = node.props?.value.trim().split(splitter).filter(Boolean);\n  const value = keys.reduce((data2, key) => {\n    if (key in data2) {\n      if (typeof data2[key] === \"function\") {\n        return data2[key]();\n      } else {\n        return data2[key];\n      }\n    }\n    return {};\n  }, data);\n  const defaultValue = node.props?.defaultValue;\n  return h2(Text, value ?? defaultValue ?? \"\");\n}\nfunction renderSlots(node, h2, documentMeta, parentProps) {\n  const children = node.children || [];\n  const slotNodes = children.reduce((data, node2) => {\n    if (!isTemplate(node2)) {\n      data[DEFAULT_SLOT].push(node2);\n      return data;\n    }\n    const slotName = getSlotName(node2);\n    data[slotName] = data[slotName] || [];\n    if (node2.type === \"element\") {\n      data[slotName].push(...node2.children || []);\n    }\n    return data;\n  }, {\n    [DEFAULT_SLOT]: []\n  });\n  const slots = Object.entries(slotNodes).reduce((slots2, [name, children2]) => {\n    if (!children2.length) {\n      return slots2;\n    }\n    slots2[name] = () => {\n      const vNodes = children2.map((child) => renderNode(child, h2, documentMeta, parentProps));\n      return mergeTextNodes(vNodes);\n    };\n    return slots2;\n  }, {});\n  return slots;\n}\nfunction propsToData(node, documentMeta) {\n  const { tag = \"\", props = {} } = node;\n  return Object.keys(props).reduce(function(data, key) {\n    if (key === \"__ignoreMap\") {\n      return data;\n    }\n    const value = props[key];\n    if (rxModel.test(key) && !nativeInputs.includes(tag)) {\n      return propsToDataRxModel(key, value, data, documentMeta);\n    }\n    if (key === \"v-bind\") {\n      return propsToDataVBind(key, value, data, documentMeta);\n    }\n    if (rxOn.test(key)) {\n      return propsToDataRxOn(key, value, data, documentMeta);\n    }\n    if (rxBind.test(key)) {\n      return propsToDataRxBind(key, value, data, documentMeta);\n    }\n    const { attribute } = find(html, key);\n    if (Array.isArray(value) && value.every((v) => typeof v === \"string\")) {\n      data[attribute] = value.join(\" \");\n      return data;\n    }\n    data[attribute] = value;\n    return data;\n  }, {});\n}\nfunction propsToDataRxModel(key, value, data, documentMeta) {\n  const number = (d) => +d;\n  const trim = (d) => d.trim();\n  const noop = (d) => d;\n  const mods = key.replace(rxModel, \"\").split(\".\").filter((d) => d).reduce((d, k) => {\n    d[k] = true;\n    return d;\n  }, {});\n  const field = \"value\";\n  const event = mods.lazy ? \"change\" : \"input\";\n  const processor = mods.number ? number : mods.trim ? trim : noop;\n  data[field] = evalInContext(value, documentMeta);\n  data.on = data.on || {};\n  data.on[event] = (e) => documentMeta[value] = processor(e);\n  return data;\n}\nfunction propsToDataVBind(_key, value, data, documentMeta) {\n  const val = evalInContext(value, documentMeta);\n  data = Object.assign(data, val);\n  return data;\n}\nfunction propsToDataRxOn(key, value, data, documentMeta) {\n  key = key.replace(rxOn, \"\");\n  data.on = data.on || {};\n  data.on[key] = () => evalInContext(value, documentMeta);\n  return data;\n}\nfunction propsToDataRxBind(key, value, data, documentMeta) {\n  key = key.replace(rxBind, \"\");\n  data[key] = evalInContext(value, documentMeta);\n  return data;\n}\nconst resolveVueComponent = (component) => {\n  if (!htmlTags.includes(component) && !component?.render) {\n    const componentFn = resolveComponent(pascalCase(component), false);\n    if (typeof componentFn === \"object\") {\n      return componentFn;\n    }\n  }\n  return component;\n};\nfunction evalInContext(code, context) {\n  const result = code.split(\".\").reduce((o, k) => typeof o === \"object\" ? o[k] : void 0, context);\n  return typeof result === \"undefined\" ? destr(code) : result;\n}\nfunction getSlotName(node) {\n  let name = \"\";\n  for (const propName of Object.keys(node.props || {})) {\n    if (!propName.startsWith(\"#\") && !propName.startsWith(\"v-slot:\")) {\n      continue;\n    }\n    name = propName.split(/[:#]/, 2)[1];\n    break;\n  }\n  return name || DEFAULT_SLOT;\n}\nfunction isTemplate(node) {\n  return node.tag === \"template\";\n}\nfunction mergeTextNodes(nodes) {\n  const mergedNodes = [];\n  for (const node of nodes) {\n    const previousNode = mergedNodes[mergedNodes.length - 1];\n    if (node.type === Text && previousNode?.type === Text) {\n      previousNode.children = previousNode.children + node.children;\n    } else {\n      mergedNodes.push(node);\n    }\n  }\n  return mergedNodes;\n}\nasync function resolveContentComponents(body, meta) {\n  if (!body) {\n    return;\n  }\n  const components = Array.from(new Set(loadComponents(body, meta)));\n  await Promise.all(components.map(async (c) => {\n    if (c?.render || c?.ssrRender || c?.__ssrInlineRender) {\n      return;\n    }\n    const resolvedComponent = resolveVueComponent(c);\n    if (resolvedComponent?.__asyncLoader && !resolvedComponent.__asyncResolved) {\n      await resolvedComponent.__asyncLoader();\n    }\n  }));\n  function loadComponents(node, documentMeta) {\n    const tag = node.tag;\n    if (node.type === \"text\" || tag === \"binding\") {\n      return [];\n    }\n    const renderTag = findMappedTag(node, documentMeta.tags);\n    const components2 = [];\n    if (node.type !== \"root\" && !htmlTags.includes(renderTag)) {\n      components2.push(renderTag);\n    }\n    for (const child of node.children || []) {\n      components2.push(...loadComponents(child, documentMeta));\n    }\n    return components2;\n  }\n}\nfunction findMappedTag(node, tags) {\n  const tag = node.tag;\n  if (!tag || typeof node.props?.__ignoreMap !== \"undefined\") {\n    return tag;\n  }\n  return tags[tag] || tags[pascalCase(tag)] || tags[kebabCase(node.tag)] || tag;\n}\n</script>\n"],"names":["_sfc_main","_a"],"mappings":"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","x_google_ignoreList":[0]}