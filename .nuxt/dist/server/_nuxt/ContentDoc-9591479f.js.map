{"version":3,"file":"ContentDoc-9591479f.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentDoc.vue"],"sourcesContent":["<script>\nimport { defineComponent, h, useSlots } from \"vue\";\nimport { withTrailingSlash } from \"ufo\";\nimport { useRuntimeConfig } from \"#app\";\nimport ContentRenderer from \"./ContentRenderer.vue\";\nimport ContentQuery from \"./ContentQuery.vue\";\nimport { useRoute, useContentHead } from \"#imports\";\nconst ContentDoc = defineComponent({\n  name: \"ContentDoc\",\n  props: {\n    /**\n     * Renderer props\n     */\n    /**\n     * The tag to use for the renderer element if it is used.\n     * @default 'div'\n     */\n    tag: {\n      type: String,\n      required: false,\n      default: \"div\"\n    },\n    /**\n     * Whether or not to render the excerpt.\n     * @default false\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Query props\n     */\n    /**\n     * The path of the content to load from content source.\n     * @default useRoute().path\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A query builder params object to be passed to <ContentQuery /> component.\n     */\n    query: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Whether or not to map the document data to the `head` property.\n     */\n    head: {\n      type: Boolean,\n      required: false,\n      default: void 0\n    }\n  },\n  /**\n   * Document empty fallback\n   * @slot empty\n   */\n  /**\n   * Document not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const { contentHead } = useRuntimeConfig().public.content;\n    const slots = useSlots();\n    const { tag, excerpt, path, query, head } = ctx;\n    const shouldInjectContentHead = head === void 0 ? contentHead : head;\n    const contentQueryProps = {\n      ...query || {},\n      path: path || query?.path || withTrailingSlash(useRoute().path),\n      find: \"one\"\n    };\n    const emptyNode = (slot, data) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentDoc>\", slot, data }, null, 2));\n    return h(\n      ContentQuery,\n      contentQueryProps,\n      {\n        // Default slot\n        default: slots?.default ? ({ data, refresh, isPartial }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return slots.default?.({ doc: data, refresh, isPartial, excerpt, ...this.$attrs });\n        } : ({ data }) => {\n          if (shouldInjectContentHead) {\n            useContentHead(data);\n          }\n          return h(\n            ContentRenderer,\n            { value: data, excerpt, tag, ...this.$attrs },\n            // Forward local `empty` slots to ContentRenderer if it is used.\n            { empty: (bindings) => slots?.empty ? slots.empty(bindings) : emptyNode(\"default\", data) }\n          );\n        },\n        // Empty slot\n        empty: (bindings) => slots?.empty?.(bindings) || h(\"p\", null, \"Document is empty, overwrite this content with #empty slot in <ContentDoc>.\"),\n        // Not Found slot\n        \"not-found\": (bindings) => slots?.[\"not-found\"]?.(bindings) || h(\"p\", null, \"Document not found, overwrite this content with #not-found slot in <ContentDoc>.\")\n      }\n    );\n  }\n});\nexport default ContentDoc;\n</script>\n"],"names":["ContentQuery","ContentRenderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,MAAA,6CAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAA,KAAA;AACA,UAAA,EAAA,YAAA,IAAA,iBAAA,EAAA,OAAA;AACA,UAAA,QAAA;AACA,UAAA,EAAA,KAAA,SAAA,MAAA,OAAA,KAAA,IAAA;AACA,UAAA,0BAAA,SAAA,SAAA,cAAA;AACA,UAAA,oBAAA;AAAA,MACA,GAAA,SAAA,CAAA;AAAA,MACA,MAAA,SAAA,+BAAA,SAAA,kBAAA,SAAA,EAAA,IAAA;AAAA,MACA,MAAA;AAAA;AAEA,UAAA,YAAA,CAAA,MAAA,SAAA,EAAA,OAAA,MAAA,KAAA,UAAA,EAAA,SAAA,0CAAA,MAAA,KAAA,GAAA,MAAA,CAAA,CAAA;AACA,WAAA;AAAA,MACAA;AAAAA,MACA;AAAA,MACA;AAAA;AAAA,QAEA,UAAA,+BAAA,WAAA,CAAA,EAAA,MAAA,SAAA,gBAAA;;AACA,cAAA,yBAAA;AACA,2BAAA,IAAA;AAAA,UACA;AACA,kBAAA,WAAA,YAAA,+BAAA,EAAA,KAAA,MAAA,SAAA,WAAA,SAAA,GAAA,KAAA,OAAA;AAAA,YACA,CAAA,EAAA,WAAA;AACA,cAAA,yBAAA;AACA,2BAAA,IAAA;AAAA,UACA;AACA,iBAAA;AAAA,YACAC;AAAAA,YACA,EAAA,OAAA,MAAA,SAAA,KAAA,GAAA,KAAA,OAAA;AAAA;AAAA,YAEA,EAAA,OAAA,CAAA,cAAA,+BAAA,SAAA,MAAA,MAAA,QAAA,IAAA,UAAA,WAAA,IAAA,EAAA;AAAA;QAEA;AAAA;AAAA,QAEA,OAAA,CAAA,aAAA;;AAAA,uDAAA,UAAA,+BAAA,cAAA,EAAA,KAAA,MAAA,6EAAA;AAAA;AAAA;AAAA,QAEA,aAAA,CAAA;;AAAA,uDAAA,iBAAA,+BAAA,cAAA,EAAA,KAAA,MAAA,kFAAA;AAAA;AAAA,MACA;AAAA;EAEA;AACA,CAAA;AACA,kBAAA;;;;;;;","x_google_ignoreList":[0]}